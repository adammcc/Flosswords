	<!-- 
		here we have oygContext top DOM element to which the play area will be bound;
		the HTML template has more binding sites for various visual parts of the puzzle: 
		oygHeader, oygHeaderMenu, oygState, oygPuzzle, oygPuzzleFooter, oygListH, oygListV, oygFooter;
		all element names for binding are prefixed with "oyg"
	-->



	<div id="oygContext" align="center" style="width:100%;">
		<table class="oyOuterFrame" border="0" cellpadding="0" cellspacing="0">
			<tr><td align="center">
				<table class="oyFrame" border="0" cellpadding="0" cellspacing="0">
					<tr>
						<td colspan="5">
							<table class="oyFrame" border="0" cellpadding="0" cellspacing="0" width="100%">
								<tr class="oyHeader">
									<td class="oyHeader">
										<div id="oygHeader"></div>
									</td>
									<td align="right">	
										<div id="oygHeaderMenu"></div>								
									</td> 
								</tr>					
							</table>
						</td>  
					</tr>
					<tr style="height: 4px;">
						<td colspan="5"></td>
					</tr>
					<tr>  
						<td rowspan="3" class="oyPuzzleCell" align="center" valign="top"> 
							<div id="oygState"></div>
							<div class="oyPuzzle" id="oygPuzzle"></div>
							<div class="oyPuzzleFooter" id="oygPuzzleFooter"></div>			
						</td>  
						<td class="oyListCellDot"></td>    
						<td class="oyListCell" valign="top" id="oygListH"></td>
					</tr>
					<tr style="height: 4px;">
						<td colspan="4"></td>
					</tr>		
					<tr>  
						<td class="oyListCellDot"></td>   
						<td class="oyListCell" valign="top" id="oygListV"></td>					
					</tr>
					<tr style="height: 4px;">
						<td colspan="5"></td>
					</tr>			
					<tr>
						<td colspan="5" class="oyFooter"> 
							<div id="oygFooter"></div>
						</td>
					</tr>			
				</table>
			</td></tr>
		</table>
		<div id="oygStatic" align="center" style="font-size: 10px; color: #4282B5; font-family: Arial;"></div>
	</div>  


<link href="/assets/application.css?body=1" media="all" rel="stylesheet" type="text/css" />
<link href="/assets/base.css?body=1" media="all" rel="stylesheet" type="text/css" />
<link href="/assets/words.css?body=1" media="all" rel="stylesheet" type="text/css" />
<script src="/assets/jquery.js?body=1" type="text/javascript"></script>
<script src="/assets/jquery_ujs.js?body=1" type="text/javascript"></script>
<script src="/assets/oyPrologue.js?body=1" type="text/javascript"></script>
<script src="/assets/oyJsrAjax.js?body=1" type="text/javascript"></script>
<script src="/assets/oyClue.js?body=1" type="text/javascript"></script>
<script src="/assets/oyMenu.js?body=1" type="text/javascript"></script>
<script src="/assets/oyPuzzle.js?body=1" type="text/javascript"></script>
<script src="/assets/oyServer.js?body=1" type="text/javascript"></script>
<script src="/assets/oySign.js?body=1" type="text/javascript"></script>
<script src="/assets/application.js?body=1" type="text/javascript"></script>
<script src="/assets/oyMisc.js?body=1" type="text/javascript"></script>



<script type="text/javascript"><!--



		// 
		
		//	here we include our own puzzle; it has to be fully prepared with all words properly arranged on the grid;
		//	currently only one instance of the puzzle can be embedded into the page, we may fix this in the future
		// 

		// var oygCrosswordPuzzle = new oyCrosswordPuzzle (
		//   "5748185539682739085",
		//   "./oy-cword-1.0",
		//   "/a/a",
		//   "FLOSSWORDS",
		//   "An Infinite Flickr Puzzle Game.",
		//   [
		// 	 new oyCrosswordClue(8, "", "Abstract", "26f265b96e01081a5ef26a432eda9cff", 1, 12, 6)
		// 	,new oyCrosswordClue(7, "", "Builder", "88a259cdfe3cb78a40ec120a63fac540", 0, 12, 7)
		// 	,new oyCrosswordClue(7, "", "Factory", "c1fa41b9627f8ea09e5a2a6ee22d6bc5", 0, 9, 9)
		// 	,new oyCrosswordClue(9, "", "Prototype", "394941ddf24e90c70298d4c2750db4d9", 0, 9, 13)
		// 	,new oyCrosswordClue(9, "", "Singleton", "c31a3cbd6db754a0e4ac5fd8e6ec3e54", 1, 17, 2)
		// 	,new oyCrosswordClue(7, "", "Adapter", "76fb70e9d93dedce00308eeb0c304412", 1, 10, 7)
		// 	,new oyCrosswordClue(6, "", "Bridge", "3a8203786f83c06011189ab882b1894c", 0, 13, 5)
		// 	,new oyCrosswordClue(9, "", "Composite", "0de044b990184a9d27dddf0f5e6806af", 0, 11, 3)
		// 	,new oyCrosswordClue(9, "", "Decorator", "d51d27de85dae46db969b1012a317f12", 0, 1, 19)
		// 	,new oyCrosswordClue(6, "", "Facade", "815dbf1b993d1c86356056c4ba416fb2", 1, 3, 0)
		// 	,new oyCrosswordClue(9, "", "Flyweight", "d87301a9c82ad02e5de19981236773d6", 0, 2, 11)
		// 	,new oyCrosswordClue(5, "", "Proxy", "a8b79bae14cff23069a1793ba55f2966", 1, 4, 7)
		// 	,new oyCrosswordClue(14, "", "Responsibility", "d29967be8acd1416731808c024de639c", 1, 7, 4)
		// 	,new oyCrosswordClue(7, "", "Command", "f3a3c64bbcdc310786988833c04d1ba4", 1, 1, 0)
		// 	,new oyCrosswordClue(11, "", "Interpreter", "d078000250c55212b9584cc691119138", 0, 0, 5)
		// 	,new oyCrosswordClue(8, "", "Iterator", "1ea9447c03c6840641f5abd5f284c3c2", 0, 1, 8)
		// 	,new oyCrosswordClue(8, "", "Mediator", "90740e7f8d0d00a7f7e39ee8b40e85c1", 0, 2, 16)
		// 	,new oyCrosswordClue(7, "", "Memento", "97e8a2700b6a48922738058cd57cd0ab", 1, 17, 12)
		// 	,new oyCrosswordClue(8, "", "Observer", "582925e788eda44bdd66bb70b26b488d", 0, 11, 15)
		// 	,new oyCrosswordClue(5, "", "State", "2c7c2e5c518ad7e1469073f6d5aa992a", 1, 9, 1)
		// 	,new oyCrosswordClue(8, "", "Strategy", "30a9b3595abdedff29f2aa6a391b560e", 0, 9, 1)
		// 	,new oyCrosswordClue(8, "", "Template", "550857c3398f86050a550e250cf19b7e", 0, 11, 17)
		// 	,new oyCrosswordClue(7, "", "Visitor", "1e5fe27c47649dddeb7ed2b2d86bb583", 1, 5, 13)
		//   ],
		//   20,
		//   20
		// );
		
		//
		//	here we configure puzzle options, callbacks and publisher information
		// 
		 
		// publisher information
		// oygCrosswordPuzzle.publisherName = "by Pavel Simakov";
		// oygCrosswordPuzzle.publisherURL = "http://www.softwaresecretweapons.com";

		// game exit URL
		// oygCrosswordPuzzle.leaveGameURL = "http://www.cnn.com";  
      
		// this is how to turn off server support; score submission and action tracking will be disabled
		


//********************************************WEAVER***************************************************
//*****************************************************************************************************
//*****************************************************************************************************
//*****************************************************************************************************
var board = [];
var wordlist = ["leadin",
"basketball",
"chief",
"collideop",
"apple",
"avert",
"asiachina",
"women",
"quake",
"iran",
"novel",
"sportmore",
"hits",
"bhutan",
"behindis",
"national",
"shutdown",
"ready",
"hires",
"tuesdaychallenge",
"accorda",
"left",
"strong",
"doubtpanetta",
"military",
"albanyin",
"hurts",
"becoming",
"nuclear",
"readiness",
"scores",
"talks",
"disagreementsthe",
"richly",
"debt",
"into",
"house",
"challengethe",
"reaches",
"american",
"russia",
"gazeleaving",
"early",
"strike",
"dispatchesindustry",
"untreatedwegman",
"endin",
"leaders",
"immigrant",
"republican",
"nail",
"ceiling",
"france",
"estimates",
"with",
"still",
"deal",
"quarterly",
"area",
"weimaraner",
"againmichael",
"compassionsenate",
"changing",
"familysharing",
"senate",
"says",
"earth",
"push",
"what",
"fungus",
"when",
"peahen",
"killed",
"draft",
"bloomingdale",
"misses",
"offer",
"rail",
"abilities",
"know",
"citi",
"ugly",
"philippines",
"retail",
"spent",
"heartache",
"effort",
"need",
"passion",
"gould",
"from",
"profit",
"news",
"casino",
"burberry",
"gains",
"game",
"turning"]

 
var board_width = 20;
var board_board = 20;

var Horizontal = [];
var Vertical = [];
var clues = [];

 

// MG - builds the empty board. 
function ClearBoard(){
   board = [];
   for(x = 0; x < board_width; x++){
       board.push([]);
     for(y = 0; y <board_width; y++){
       board[x].push(' ');    
     }
    }
}

function MatchedLetters(Word){
  var Locations = []; 
   for(x = 0; x < board_width;  x++){
     for(y = 0; y < board_width; y++){
       var c = board[x][y].toUpperCase();
       if (Word.indexOf(c) > -1){
           Locations.push(new Array(c,x,y));  //'M',1,2
       }
     } 
   }
  return Locations;
}

// MG - Sets a blank crossword cell before word so words don't ajoin on same row or column.  
function BlankPrior(x,y,dx,dy,word){
  dx = dx * -1; dy = dy * -1;
  x = x + dx;
  y = y + dy;
  if(board[x]) {
	if (board[x][y] == " ") { 
	   	return true; 
	   } else {
	   	return false;
	   }  
  }  
  return true; 
}

// MG - Sets a blank crossword cell after word so words don't ajoin on same row or column.  
function BlankAfter(x,y,dx,dy,word){
  dx = dx * (word.length + 1); dy = dy * (word.length + 1);
  x = x + dx;
  y = y + dy;
  if(board[x]) {
	   if (board[x][y] == " ") { 
	   	return true; 
	   } else {
	   	return false;
	   }  
  }  
  return true; 
}


function ScorePath(x,y,dx,dy,word){
  var score = 0;
  var size = word.length;
  var blank = 0;

   px = x - dx;
   py = y - dy;
    if(board[px]) {
		if (board[px][py] != " ") {
			return -1;
		}
    }


  for(var i = 0; i < size; i++) {
   if (((x<board_width) && (y<board_board) && (x>-1) && (y>-1))) {
     if (board[x][y] != " ") {
         if(board[x][y] == word[i]) { 
         	score+=1; 
         } else {
         	return -1;
         }
     } else blank += 1;

     if (board[x][y] != word[i]) {
       if (dx == 1) {
           var subscore = 0; 
           if(board[x][y-1]) {
           		if(board[x][y - 1] == " ")  subscore+=1
           		} else subscore += 1;
           if(board[x][y + 1]) {
           		if(board[x][y + 1]==" ") subscore+=1
           		} else  subscore += 1;
           if (subscore==2) {
           		score += 1
           } else {
           		return -1;
           }
         }
       if(dy == 1){
           var subscore = 0; 
           if(board[x-1]) {
           		if(board[x - 1][y] == " ") subscore += 1
           	} else  subscore+=1;
           if(board[x + 1]) {
           		if(board[x + 1][y] == " ") subscore += 1
           	} else  subscore+=1;
           if (subscore == 2) {
           	  	score+=1
           	} else {
           		return -1;
           	}
         }
        }

   } else return -1;
    x = x + dx;
    y = y + dy;
  }
   
    if(board[x]) {
      if (board[x][y] != " ") {
      	return -1;
      }
    }

 //this looks wrong********************
  if (blank == word.length) score=0;
  return score;
}
//*************************************

function CrossablePlaces(word){
  var Places = [];
  var StartingPoints = MatchedLetters(word);
  var dx = 0;
  var dy = 0;
  var bestscore = 0;
  var bestdx = 0;
  var bestx= 0;
  var bestdy = 0;
  var besty = 0;
 
  for(x = 0; x < board_width; x++) {
     for(y = 0; y < board_width; y++) {
        Hscore = ScorePath(x,y,1,0,word);
        Vscore = ScorePath(x,y,0,1,word); 
       document.write(word+" ("+x+","+y+") H="+Hscore+"  V="+Vscore+" <br>");
        if(Hscore> bestscore) { 
            bestscore = Hscore;
            bestx = x;
            besty = y;
            bestdx = 1;
            bestdy =0 ;
        }
        if(Vscore> bestscore) { 
            bestscore = Vscore;
            bestx = x;
            besty = y;
            bestdx = 0;
            bestdy = 1;
        }
     }  
  }
  if(bestscore > 0){
     document.write(word+" - "+bestscore+"("+bestx+","+besty+")-("+bestdx+","+bestdy+")<br>");
      Places.push(new Array(bestscore,bestx,besty,bestdx,bestdy));
   }
  return Places;
} 
 
function PlaceWord(x,y,dx,dy,word){
  // console.log(word);
  // console.log("x="+x);
  // console.log("y="+y);
  // console.log("dx="+dx);
  // console.log("dy="+dy);
  if (x != null && y != null && dx != null && dy != null && word != null) {
  	clues.push(new oyCrosswordClue(word.length, "", word, "", dy, x, y));
  }
  // console.log(clues.length);
  var size = word.length;
  for(var i = 0; i < size; i++) {
   	if(board[x]) {
      	board[x][y] = word[i];
    }
    x = x + dx;
    y = y + dy;
  }

  if (dx == 1) {
  	Horizontal.push(new Array(x,y,word));
  }
  if(dy == 1) {
  	Vertical.push(new Array(x,y,word));
  }
  return true;
}

function PathIsClear(x,y,dx,dy,word){
  var size = word.length;
  for(var i = 0; i < size; i++) {
	   if(board[x]) {
	    	if (board[x][y] != " ") { 
	    		return false; 
	    	}
	    		if (ScorePath(x,y,dx,dy,word) < 0) {
	    			return false;
	    		}
   } else return false;
    x = x + dx;
    y = y + dy;
  }
  return true;
}

function PlaceAtRandom(word) {  
  var trynum = 0; 
  var keeptrying = true;
  while(keeptrying) {
      var x = Math.floor(Math.random() * board_width);
      var y = Math.floor(Math.random() * board_width);
      var HorV = Math.floor(Math.random() * 20);
      if(HorV % 2 == 0) { 
      	dx = 0;
      	dy = 1;
      } else { 
      	dx = 1;
      	dy = 0;
      }
      keeptrying = ((trynum<board_width*board_board) && (!PathIsClear(x,y,dx,dy,word)));
      trynum++;
  } //  document.write(word+":random("+(trynum+1)+")<br>");
  if (PathIsClear(x,y,dx,dy,word)) { 
    PlaceWord(x,y,dx,dy,word);
  }
}

function PlaceAtBestCrossing(places,word){
  var x = places[0][1];  
  var y = places[0][2];
  var dx = places[0][3];
  var dy = places[0][4];
  PlaceWord(x,y,dx,dy,word);
}

//1. Loops 


function BuildCrossword(){
	ClearBoard();
	unconnected = 0;
	xwordlist = wordlist;  
	var Retry = [];
	var Retry2 = [];
	while(xwordlist.length > 0) {
	  var word = xwordlist.pop(); 
	  var places = CrossablePlaces(word);
	    if (places.length > 0) {   
	   // document.write(word+":best("+places.length+" results)<br>");
	     PlaceAtBestCrossing(places,word);  //so Mia could cross both Mike and Ann..
	   } else {
	     if (Retry.indexOf(word) == -1) {
	     	Retry.push(word); xwordlist.push(word);
	     } else if (Retry2.indexOf(word)==-1) {
	     	Retry2.push(word); xwordlist.push(word);
	     } else {
	       PlaceAtRandom(word); 
	   	}
	   }
	}  
}

function ScreenDumpCrossword(){
   document.write("!<pre>");  
   for(x = 0; x < board_width; x++) {
     for(y = 0; y < board_width; y++) {
       var c = board[x][y];       
       document.write(c);
     }
      document.write(x+"\r\n");
    }
    document.write("</pre>");
 
 document.write('Down:<br>');
 for(var i = 0; i < Vertical.length; i++) {
 	document.write((i+1)+'. ('+Vertical[i]+')<br>');
 }
 document.write('Across:<br>');
 for(var i = 0; i < Horizontal.length; i++) {
 	document.write((i+1)+'. ('+Horizontal[i]+')<br>');
 }
}

function CrosswordTable() {
       document.write('<table border=1 cellspacing=0 cellpadding=2>');  
   for(x = 0; x < board_width; x++) {
       document.write("<tr>");  
     for(y = 0; y < board_width; y++) {
       var c = board[x][y]; 
       if( c == " ") {
       	document.write('<td style="background:#000">'); 
       } else {  
       	document.write("<td>");        
       }
       document.write(c);
       document.write("</td>");  
     }
       document.write("</tr>");  
    }
       document.write("</table>");
	   document.write('Down:<br>');
	 for(var i = 0; i < Vertical.length; i++) { 
	 	document.write((i+1)+'. ('+Vertical[i]+')<br>'); 
	 }
	 	document.write('Across:<br>');
	 for(var i = 0; i < Horizontal.length; i++) {
	 	document.write((i+1)+'. ('+Horizontal[i]+')<br>'); 
	 }


}

// console.log(oygCrosswordPuzzle);
// console.log(clues.length);

//**********************************************************
BuildCrossword();
CrosswordTable();

	console.log(clues)

	var oygCrosswordPuzzle = new oyCrosswordPuzzle (
	      "5748185539682739085",
	      "./oy-cword-1.0",
	      "/a/a",
	      "FLOSSWORDS",
	      "An Infinite Flickr Puzzle Game.",
	      clues,
	      20,
	      20
	);

//*****************************************************************************************************
//*****************************************************************************************************
//****************************************END-WEAVER***************************************************
oygCrosswordPuzzle.canTalkToServer = false;

	
	--></script>	

</script>

<script src="/assets/oyEpilogue.js?body=1" type="text/javascript"></script>

</body>  